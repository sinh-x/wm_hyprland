#!/usr/bin/env fish

set state (hyprctl -j clients)
set active_window (hyprctl -j activewindow)

set current_addr (echo "$active_window" | gojq -r '.address')

set window (echo "$state" |
  gojq -r '.[] | select(.monitor != -1 ) | "\(.class),\(.title),\(.workspace.name),\(.address)"' |
    grep -v "special:" |
    sed "s|$current_addr|focused ->|" |
    sort -r |
    column -s, -t |
    tofi --fuzzy-match true)

set addr (echo "$window" | awk '{print $NF}')
set ws (echo "$window" | awk '{print $NF-1}')

if string match -r "focused*" "$addr"
    echo 'already focused, exiting'
    exit 0
end

set fullscreen_on_same_ws (echo "$state" | gojq -r ".[] | select(.fullscreen == true) | select(.workspace.name == \"$ws\") | .address")

if test -n "$window"
    if test -z "$fullscreen_on_same_ws"
        hyprctl dispatch focuswindow address:$addr
    else
        # If we want to focus app_A and app_B is fullscreen on the same workspace,
        # app_A will get focus, but app_B will remain on top.
        # This monstrosity is to make sure app_A will end up on top instead.
        # XXX: doesn't handle fullscreen 0, but I don't care.
        notify-send 'Complex switch' "$window"
        hyprctl --batch "dispatch focuswindow address:$fullscreen_on_same_ws; dispatch fullscreen 1; dispatch focuswindow address:$addr; dispatch fullscreen 1"
    end
end
